--------------------------------------------------------------------------------
Section 0 - Line up
--------------------------------------------------------------------------------
Player 0 (P0): 3/4 Asian, Basic Bois
        How does this strategy decide?
Player 1 (P1): The name the team gives to itself, The name the team gives to this strategy
        How does this strategy decide?
Player 2 (P2): Team India, The name the team gives to this strategy
        How does this strategy decide?
Player 3 (P3): Peppa Pig's, TicTakNo
        This strategy is starting by betraying, and uses the important parts of 
        tit for tat and then some improvements.
Player 4 (P4): 









, modified tit for tat
        collude first round, then copy opponent. If the opponent's score is sign
        ificantly more than ours in the late game, betray. In the /very/ late ga
        me, betray no matter what
Player 5 (P5): Goosefuge, multi appraoch
        based on the five or first previous outputs?
Player 6 (P6): ponyjar, The name the team gives to this strategy
        How does this strategy decide?
--------------------------------------------------------------------------------
Section 1 - Player vs. Player
--------------------------------------------------------------------------------
Each column shows pts/round earned against each other player:
             P0     P1     P2     P3     P4     P5     P6
vs. P0 :      0   -198      0   -198   -249   -140      0
vs. P1 :   -201      0   -246   -250   -249   -201     -5
vs. P2 :      0   -246      0   -246   -248   -190      0
vs. P3 :   -203   -250   -246      0   -252   -234   -211
vs. P4 :   -249   -249   -248   -249      0   -248   -249
vs. P5 :   -144   -198   -190   -234   -248      0   -148
vs. P6 :      0      0      0   -188   -249   -144      0
TOTAL  :   -797  -1141   -930  -1365  -1495  -1157   -613
--------------------------------------------------------------------------------
Section 2 - Leaderboard
--------------------------------------------------------------------------------
Average points per round:
Team name (P#):  Score      with strategy name
ponyjar   (P6):        -88 points with The name the team gives to this strategy
3/4 Asian (P0):       -114 points with Basic Bois                              
Team India(P2):       -133 points with The name the team gives to this strategy
The name t(P1):       -163 points with The name the team gives to this strategy
Goosefuge (P5):       -166 points with multi appraoch                          
Peppa Pig'(P3):       -195 points with TicTakNo                                










(P4):       -214 points with modified tit for tat                    
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
team1--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = '3/4 Asian' # Only 10 chars displayed.
#Trent, Kemuel, Rashaun, Clark
strategy_name = 'Basic Bois'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    """ Alternate 'C' and 'D' """
    if my_history[-1] == 'C':
        return 'D'
    else:
        return 'C'
    
def move(my_history, their_history, my_score, their_score):
    #Scenario #1: First Turn Collude
    if len(my_history)==0: #It's the first round; collude.
        return 'c'
    elif my_history[-1]=='c' and their_history[-1]=='b': #If my history is c and their history is b, then return b.
        return 'b' 
    else:
        return 'c' #Otherwise return b.
    #Scenario #2: First Turn Betray
    if len(my_history)==0: #It's the first round; betray.
        return 'b'
    elif my_history[-1]=='b' and their_history[-1]=='c': #If my history is b and their history is c, then return c.
        return 'c' 
    else:
        return 'b' #Otherwise return b.
    #Scenario #3:  If previous turn was c, then return b if score is -1.                                    
    """ Alternate 'c' and 'b' """
    if my_history[-1] == 'c': 
        return 'b'
    else:
        return 'c'
    #Scenario #4: If previous turn was b, then return b if score is -1. 
    """ Alternate 'c' and 'b' """
    if my_history[-1] == 'b':
        return 'c'
    else:
        return 'b'

             
--------------------------------------------------------------------------------
team2--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'The name the team gives to itself' # Only 10 chars displayed.
strategy_name = 'The name the team gives to this strategy'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] andef move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    if len(my_history) == 0:
        return 'c'
    elif my_score > their_score:
        return 'c'
    else:
        return 'b'
    #scenarios 1-3
    
   
 
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
  
    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
team3--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Team India' # Only 10 chars displayed.


# Sanjith Iype, Gautam Nair, Vaihbhav Gokhale, Yuva Krishnapilllai

strategy_name = 'The name the team gives to this strategy'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''


    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    turns_value=len(my_history)

    # This is our first scenario that acts on the first turn. It starts on betray the first turn.
    if len(my_history) == 0:
        return 'c' 
        
    #  This is our second scenario that acts if we are losing after 20 turns. It will always return betray if we lose after 20 turns. 
    elif turns_value >= 80 and my_score < their_score:
        return 'b'
        
    #  This is our third scenario that acts if our score is at or below -2000.  If we are below -2000, we always return betray.
    elif  my_score <= -2000:
        return 'b'
        
    #  This is our fourth scenario that acts if all the other scenarios don't work. It returns their answer like an "uno reverse card".
    else: 
	     return their_history[-1]



  

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             --------------------------------------------------------------------------------
team4--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = 'Peppa Pig\'s' # Only 10 chars displayed.
# Jake Gipstein, Sofia Baluta, Yannick Mertens, Adi Leist
strategy_name = 'TicTakNo'
strategy_description = 'This strategy is starting by betraying, and uses the important parts of tit for tat and then some improvements.'   
            
their_history = []
my_history = []
my_score = 0
their_score = 0

    
            
def move(my_history, their_history, my_score, their_score):
    #If they betrayed last round we betray. Scenario 1 (Whole team)
   if len(their_history) > 1 and their_history[-1]=='b':
       return 'b'
    #If it is the first round betray. Scenario 2(Adi)
   elif len(my_history) == 0:
        return 'b'
    #If they colluded the last two rounds then betray. Scenario 3 (Yannick)
   elif len(their_history) > 1 and their_history[-1]=='c' and their_history[-2]=='c':
        return 'b'
    #If their score is above 100 betray. Scenario 4 (Jake)
   elif their_score >= 100:
       return 'b'
    #If none of these, collude. Scenario 5 (Sofia)
   else:
        return 'c'
    
 

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')                         
    
 

    
--------------------------------------------------------------------------------
team5--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = '\n\n\n\n\n\n\n\n\n\n' # Only 10 chars displayed.
strategy_name = 'modified tit for tat'
strategy_description = 'collude first round, then copy opponent. If the opponent\'s score is significantly more than ours in the late game, betray. In the /very/ late game, betray no matter what'
    
def move(my_history, their_history, my_score, their_score):
    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''

    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
    
    #modified tit for tat

    #Scenario 1: collude on first move
    if len(my_history) == 0:
        return 'c'

    #Scenario 2: betray on move 299 or 300
    if len(my_history) >= 298:
        return 'b'

    #Scenario 3: betray if the opponent's score is 300 or more greater than our score starting on round 250
    if their_score-my_score >= 300 and len(my_history) >= 249:
        return 'b'

    #Scenario 4: by default do what the opponent did last
        return their_history[-1]


    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
team6--------------------------------------------------------------------------------
import random
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####    

team_name = 'Goosefuge' # Only 10 chars displayed.
#Shawn, Aiden, Andrew, Yael
strategy_name = 'multi appraoch'
strategy_description = 'based on the five or first previous outputs?'

def move(my_history, their_history, my_score, their_score):
     #on the first turn collude
    if len(their_history) == 0:
        return 'c'
    else:
        #every 42 rounds we betray
        if len(my_history)%42 == 0:
            return 'b'
        else: 
            #When there's a ton of rounds we're just random
            if len(my_history) >= 275:
                return random.choice(['b','c'])
            #Do what they did
            else:
                return their_history[-1]


    ''' Arguments accepted: my_history, their_history are strings.
    my_score, their_score are ints.
    
    Make my move.
    Returns 'c' or 'b'. 
    '''
    turns_passed = len(their_history)
    pattern_finder = ''
    if len(their_history) >= 5:
        pattern_finder += (their_history[-5] + their_history[-4] + their_history[-3] + their_history[-2] + their_history[-1])
    print(pattern_finder)
    if 'bcbcb' in pattern_finder:
        return "c"
    if 'cbcbc' in pattern_finder:
        return "b"
            #aidan-this function finds the alternating pattern of cbc or bcb and reacts accordingly
    # my_history: a string with one letter (c or b) per round that has been played with this opponent.
    # their_history: a string of the same length as history, possibly empty. 
    # The first round between these two players is my_history[0] and their_history[0].
    # The most recent round is my_history[-1] and their_history[-1].
    
    # Analyze my_history and their_history and/or my_score and their_score.
    # Decide whether to return 'c' or 'b'.
   
    print(turns_passed)
    if their_history[-1] == "b":
        return "b"
    else:
        return "c"
        
#if colludes then collude, if betrays then betray 
#This allows the code to continue and alternate, and try to keep a fair score between the opponent and us

    return 'c'

    turns_passed = len(their_history)
 
    if their_history[-1] == "b":
        return "b"
    else:
        return "c"
        
#if colludes then collude, if betrays then betray 
#This allows the code to continue and alternate, and try to keep a fair score between the opponent and us

   
    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False
    #what we do on out first turn is collude
    if len(their_history) == 0:
        return 'c'
    else:
        #every 43 rounds we betray
        if len(my_history)%5 == 0:
            return 'b'
        else:            
            return their_history[-1]
                
            
            



    if __name__ == '__main__':
     
    # Test 1: Betray on first move.if test_move(my_history='',
            their_history='', 
            my_score=0,
            their_score=0,
            result='b'
            print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
team8--------------------------------------------------------------------------------
####
# Each team's file must define four tokens:
#     team_name: a string
#     strategy_name: a string
#     strategy_description: a string
#     move: A function that returns 'c' or 'b'
####

team_name = "ponyjar"
# Only 10 chars displayed.
# Andrei Ivanou, Rylen Medina, Ethan Peglow, Oleksandr Gorpynich
strategy_name = 'The name the team gives to this strategy'
strategy_description = 'How does this strategy decide?'
    
def move(my_history, their_history, my_score, their_score):
    #if it is the first or second move return c
    if len(my_history) == 0 or len(my_history) == 1:
        return "c"
    #if it is the potential last move return b
    elif len(my_history) == 299:
        return "b"
    #all next move require going back so we check if the length of history is sufficient
    elif len(my_history) > 3:
        #if we went b twice then go c
        if my_history[-1] == "b" and my_history[-2] == "b":
            return "c"
        #if they went b and we c then go b
        elif their_history[-1] == "b" and my_history[-1] == "c":
            return "b"
        #if we both went b then return b
        elif their_history[-1] == "b" and my_history[-1] == "b":
            return "b"
    #If none of these are true then return c
    return "c"

    
def test_move(my_history, their_history, my_score, their_score, result):
    '''calls move(my_history, their_history, my_score, their_score)
    from this module. Prints error if return value != result.
    Returns True or False, dpending on whether result was as expected.
    '''
    real_result = move(my_history, their_history, my_score, their_score)
    if real_result == result:
        return True
    else:
        print("move(" +
            ", ".join(["'"+my_history+"'", "'"+their_history+"'",
                       str(my_score), str(their_score)])+
            ") returned " + "'" + real_result + "'" +
            " and should have returned '" + result + "'")
        return False

if __name__ == '__main__':
     
    # Test 1: Betray on first move.
    if test_move(my_history='',
              their_history='', 
              my_score=0,
              their_score=0,
              result='b'):
         print 'Test passed'
     # Test 2: Continue betraying if they collude despite being betrayed.
    test_move(my_history='bbb',
              their_history='ccc', 
              # Note the scores are for testing move().
              # The history and scores don't need to match unless
              # that is relevant to the test of move(). Here,
              # the simulation (if working correctly) would have awarded 
              # 300 to me and -750 to them. This test will pass if and only if
              # move('bbb', 'ccc', 0, 0) returns 'b'.
              my_score=0, 
              their_score=0,
              result='b')             
--------------------------------------------------------------------------------
Section 3 - Game Data for Team 3/4 Asian
--------------------------------------------------------------------------------
-201 pt/round: 3/4 Asian(P0) "Basic Bois"
-198 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
CcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
CBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
0 pt/round: 3/4 Asian(P0) "Basic Bois"
0 pt/round: Team India(P2) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-203 pt/round: 3/4 Asian(P0) "Basic Bois"
-198 pt/round: Peppa Pig's(P3) "TicTakNo"
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
-249 pt/round: 3/4 Asian(P0) "Basic Bois"
-249 pt/round: 









(P4) "modified tit for tat"
Cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C                                                                               

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                            

--------------------------------------------------------------------------------
-144 pt/round: 3/4 Asian(P0) "Basic Bois"
-140 pt/round: Goosefuge(P5) "multi appraoch"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
0 pt/round: 3/4 Asian(P0) "Basic Bois"
0 pt/round: ponyjar(P6) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team The name the team gives to itself
--------------------------------------------------------------------------------
-198 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
-201 pt/round: 3/4 Asian(P0) "Basic Bois"
CBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
CcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
-246 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
-246 pt/round: Team India(P2) "The name the team gives to this strategy"
CBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
CcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbb
bbbbbbbbbbbb

--------------------------------------------------------------------------------
-250 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
-250 pt/round: Peppa Pig's(P3) "TicTakNo"
cBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
Bcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-249 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
-249 pt/round: 









(P4) "modified tit for tat"
Cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
C                                                                               

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                               

--------------------------------------------------------------------------------
-198 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
-201 pt/round: Goosefuge(P5) "multi appraoch"
CBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
CcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcB
BcBcBcBcBc

--------------------------------------------------------------------------------
0 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
-5 pt/round: ponyjar(P6) "The name the team gives to this strategy"
CBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CcCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Team India
--------------------------------------------------------------------------------
0 pt/round: Team India(P2) "The name the team gives to this strategy"
0 pt/round: 3/4 Asian(P0) "Basic Bois"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-246 pt/round: Team India(P2) "The name the team gives to this strategy"
-246 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
CcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
CBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbb
bbbbbbbbbbbb

--------------------------------------------------------------------------------
-246 pt/round: Team India(P2) "The name the team gives to this strategy"
-246 pt/round: Peppa Pig's(P3) "TicTakNo"
cBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
BcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-248 pt/round: Team India(P2) "The name the team gives to this strategy"
-248 pt/round: 









(P4) "modified tit for tat"
Cc       bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
C                                                                               

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
                                        

--------------------------------------------------------------------------------
-190 pt/round: Team India(P2) "The name the team gives to this strategy"
-190 pt/round: Goosefuge(P5) "multi appraoch"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbb
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
0 pt/round: Team India(P2) "The name the team gives to this strategy"
0 pt/round: ponyjar(P6) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Peppa Pig's
--------------------------------------------------------------------------------
-198 pt/round: Peppa Pig's(P3) "TicTakNo"
-203 pt/round: 3/4 Asian(P0) "Basic Bois"
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
-250 pt/round: Peppa Pig's(P3) "TicTakNo"
-250 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
Bcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-246 pt/round: Peppa Pig's(P3) "TicTakNo"
-246 pt/round: Team India(P2) "The name the team gives to this strategy"
BcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-249 pt/round: Peppa Pig's(P3) "TicTakNo"
-252 pt/round: 









(P4) "modified tit for tat"
Bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c                                                                               

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

cccccccccccccccccc
                  

--------------------------------------------------------------------------------
-234 pt/round: Peppa Pig's(P3) "TicTakNo"
-234 pt/round: Goosefuge(P5) "multi appraoch"
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-188 pt/round: Peppa Pig's(P3) "TicTakNo"
-211 pt/round: ponyjar(P6) "The name the team gives to this strategy"
BCBBbbBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cCccbbcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcB
cBcBcBcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team 










--------------------------------------------------------------------------------
-249 pt/round: 









(P4) "modified tit for tat"
-249 pt/round: 3/4 Asian(P0) "Basic Bois"
C                                                                               
Cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                                                                            
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

--------------------------------------------------------------------------------
-249 pt/round: 









(P4) "modified tit for tat"
-249 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
C                                                                               
Cbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                                               
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-248 pt/round: 









(P4) "modified tit for tat"
-248 pt/round: Team India(P2) "The name the team gives to this strategy"
C                                                                               
Cc       bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

                                        
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-252 pt/round: 









(P4) "modified tit for tat"
-249 pt/round: Peppa Pig's(P3) "TicTakNo"
c                                                                               
Bccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                  
cccccccccccccccccc

--------------------------------------------------------------------------------
-248 pt/round: 









(P4) "modified tit for tat"
-248 pt/round: Goosefuge(P5) "multi appraoch"
C                                                                               
Cc                                        b                                     

                                  
    b                             

--------------------------------------------------------------------------------
-249 pt/round: 









(P4) "modified tit for tat"
-249 pt/round: ponyjar(P6) "The name the team gives to this strategy"
C                                                                               
Cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                                                                                
cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

                     
ccccccccccccccccccccc

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team Goosefuge
--------------------------------------------------------------------------------
-140 pt/round: Goosefuge(P5) "multi appraoch"
-144 pt/round: 3/4 Asian(P0) "Basic Bois"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
-201 pt/round: Goosefuge(P5) "multi appraoch"
-198 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
CcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
CBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBc
cBcBcBcBcB

--------------------------------------------------------------------------------
-190 pt/round: Goosefuge(P5) "multi appraoch"
-190 pt/round: Team India(P2) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbb
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-234 pt/round: Goosefuge(P5) "multi appraoch"
-234 pt/round: Peppa Pig's(P3) "TicTakNo"
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

--------------------------------------------------------------------------------
-248 pt/round: Goosefuge(P5) "multi appraoch"
-248 pt/round: 









(P4) "modified tit for tat"
Cc                                        b                                     
C                                                                               

    b                             
                                  

--------------------------------------------------------------------------------
-144 pt/round: Goosefuge(P5) "multi appraoch"
-148 pt/round: ponyjar(P6) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Section 3 - Game Data for Team ponyjar
--------------------------------------------------------------------------------
0 pt/round: ponyjar(P6) "The name the team gives to this strategy"
0 pt/round: 3/4 Asian(P0) "Basic Bois"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-5 pt/round: ponyjar(P6) "The name the team gives to this strategy"
0 pt/round: The name the team gives to itself(P1) "The name the team gives to this strategy"
CcCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
0 pt/round: ponyjar(P6) "The name the team gives to this strategy"
0 pt/round: Team India(P2) "The name the team gives to this strategy"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC

--------------------------------------------------------------------------------
-211 pt/round: ponyjar(P6) "The name the team gives to this strategy"
-188 pt/round: Peppa Pig's(P3) "TicTakNo"
cCccbbcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
BCBBbbBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBc
BcBcBcBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
-249 pt/round: ponyjar(P6) "The name the team gives to this strategy"
-249 pt/round: 









(P4) "modified tit for tat"
Cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
C                                                                               

cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
                                                                                

ccccccccccccccccccccc
                     

--------------------------------------------------------------------------------
-148 pt/round: ponyjar(P6) "The name the team gives to this strategy"
-144 pt/round: Goosefuge(P5) "multi appraoch"
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc

cBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc
BcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcB

--------------------------------------------------------------------------------
